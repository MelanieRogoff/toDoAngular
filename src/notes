Tutorial Notes: 

Tutorial #1: Folder Structure
---------------------------------------------

**CAN RESET PORT BY DOING ng serve --port=4300**

1.e2e:
    -where our end-to-end test scripts live. 
    -has protractor.conf.js - Protractor framework runs end to end tests
    -app.po.ts = Protractor file that'll have "po" file (po is how we know it's Protractor file)
    -app.e2e-spec.ts file:
        -e2e tells the script that it's end to end test script
        -spec means it's a test file

2. node_modules:
    -ng new appNameHere makes a new node_modules
    -folder where all modules/libraries live
    - use: npm i nameHere to install a library. Ex: npm i bootstrap
    - DON'T TOUCH THIS FOLDER FOR DEVELOPMENT PURPOSES. 

3. src (most critical):
    -where our app resides
    - Basic Structure:
        a. app folder (where we see components, modules, services, directives, pipes)
            i. app.component.ts, app.component.html, etc
            ii. app.component.spec.ts file [means it's a UNIT TEST script/file, NOT end to end]
        b. assets
            -styles
            -icons
            -images
        c. environments (configure variables or pipelines for dev, staging, test, prod)

        d. polyfills - if user browser is outdated, polyfills will add the functionality to it to make it backwards compatible

        e. main.ts - boots up the application

        f. styles.css - global stylesheet. Use limited things such as fonts/typography. Have specific styling in respective component css files

4. test.ts - test script for booting process. All the code for main.ts is tested HERE.

5. angular.json - has the configuration for our entire project 
        
6. karma.conf.js - runs unit test scripts

7. tsconfig.json - build & compilation related to our angular app

8. tslint.json - linting/coding standards we can set

9. package.json
    -can customize the scripts and add new scripts
    - GO HERE 1ST TO UNDERSTAND ANY ANGULAR PROJECT YOU JOIN/EXISTING APPLICATION

10. package-lock.json
    -contains everything needed to run in prod mode - CRITICAL TO HAVE
    -resolves all required sub modules

**bootstrapModule loads and initializes browser application**

**use ng test to run Jasmine unit tests**

**use ng e2e to run all our end to end tests**

**use ng update if you run on any version less than current/desired version**

**use ng build to build/generate the output of our app. It's compiled JS code**

**use ng lint to see what code passes the syntax linting. Can set coding standards & rules**

-----------------------------------------------------------------------
Tutorial #2: Modules
---------------------------------------------
1. Contains multiple components, can contain services, directives, pipes related to a particular functionality -- basically a logical grouping

2. In modules (ex: AppModule), we do the following:

    -declarations: enter components we're using here, as well as pipes
    -imports: enter modules we're going to use here
    -providers: enter any services we use here
    -bootstrap: tells angular which component to start with

3. Make a new module by doing: ng generate module todo, for example. 
    -MUST import it into AppModule

-----------------------------------------------------------------------
Tutorial #3: Decorators
---------------------------------------------
1. TS feature used for passing metadata

2. Functions that return functions; invoked @ run time

3. Types of Decorators:
    A. Class Decorators: @NgModule, @Component
    B. Property Decorators: @Input, @output -- ex: @Input() data: string;
    C. Method/Event Decorators: @HostListener
    D. Parameter Decorators: @Inject

4. Start with @ symbol

-----------------------------------------------------------------------
Tutorial #4: Components
---------------------------------------------
1. Basically little pieces that can be reused throughout the app in multiple places.

2. Smaller feature/functionality inside of a bigger functionality

3. Tree Hierarchy:
         Parent
    Child1, Child2, Child3

4. <app-root> = 1st component that gets loaded. You see this in app.component.html

5. AppComponent = MOST IMPORTANT COMPONENT. Its selector is <app-root>

6. Each component will have 3 important things:
    -selector
    -templateUrl or template
    -stylesUrl

7. To make a component, do: ng g c componentName. It'll add the component name automatically to our AppModule for us

8. Where you generate the component is CRITICAL bc the parent module will be updated accordingly with the new component

9. We can have components inside of components (sub components). We do this by taking the selector name and putting it in a component html file as an element. 
    -Ex: we put our <app-tasks> inside of AppComponent by putting, in app.component.html: <app-tasks></app-tasks>

10. We can import our components by importing the corresponding module into AppModule.

11. Need to do export: [ComponentHere] in order to use it when importing a module that corresponds to it

-----------------------------------------------------------------------
Tutorial #5: Directives (like a class)
---------------------------------------------
1. 3 Types of Directives:

    A. Component 
        -Every app needs at least 1 component
        - Have their own templates
        - Events attached

    B. Structural
        -ALWAYS STARTS WITH *
        -(*) Symbol
        -Updates structure of the template/elements of the template
        -*ngFor, *ngIf, *ngSwitch

    C. Attribute 
        -Changes the styling property
        -ngStyle, ngClass 
            -Ex: [ngStyle]='{color: colorName}' <-- Define the colorName in the ts file

2. ngIf is if/else (can show/hide using this)

3. ngSwitch is switch case

4. To make a directive, do: ng generate directive directiveName

-----------------------------------------------------------------------
Tutorial #6: *ngIf
---------------------------------------------
1. Built-in STRUCTURAL Directive that can add/remove elements

2. Resolves to true or false (is boolean)

3. Example:
    <div *ngIf="condition"></div>

4. Else statement in *ngIf will show the block based on the false condition

5. **FOR USING ELSE, USE <ng-template> & PASS A TEMPLATE REFERENCE VARIABLE W/It
    Ex: 
        <div *ngIf="showValue; else showMessage">Show Message</div>
        <ng-template #showMessage>Show the else message</ng-template>

6. CANNOT DEFINE THE TEMPLATE REFERENCE VARIABLE W/ANYTHING OTHER THAN NG-TEMPLATE

7. *ngIf with Then AND Else statement
    -When condition is true, use the template variable reference, and THEN block will be exectued
    -When condition is false, use the template variable reference, and ELSE block will be exectued
    -Ex:
        <div *ngIf="showValue then thenBlock; else showMsg">Show value</div>
        <ng-template #thenBlock>Showing THEN Message</ng-template>
        <ng-template #elseBlock>Showing ELSE Message</ng-template>

-----------------------------------------------------------------------
Tutorial #7: *ngSwitch
---------------------------------------------
1. Built-in STRUCTURAL Directive that can add/remove elements

2. Allows element to be shown/hidden based on a condition

3. Can take MULTIPLE value params for a condition check

4. We also define a default action

5. 3 Important Elements of *ngSwitch:
    A. *ngSwitch
    B. *ngSwitchCase
    C. *ngSwitchDefault

6. Ex: 
    <div [ngSwitch]="switchExpressionHere>
        <div *ngSwitchCase="meetsExpression1Criteria">...</div>
        <div *ngSwitchCase="meetsExpression2Criteria">...</div>
        <div *ngSwitchCase="meetsExpression3Criteria">...</div>
        <div *ngSwitchDefault>...</div>
    </div>

7. Can pass any value type - integer, string, etc

8. Can read the value dynamically

9. REMEMBER TO PUT * BEFORE THE NG

10. For STRING VALUES, put '' inside the ""

-----------------------------------------------------------------------
Tutorial #8: *ngFor
---------------------------------------------
1. Like a for statement

2. Built-in STRUCTURAL directive -- modifies the DOM structure

3. Loops through elements to display array data in the template

4. Ex:
    <div *ngFor="let el of collection"></div>

5. Can be used with any element, not just <div>

6. Provides local variables in the array data. 

    A. Index -- this gets the CURRENT index of the CURRENT element in the iteration
        i. Index starts with 0
        ii. VERY important for whenever we do DOM manipulation
        ii. Ex: 
            <div *ngFor = let el of elements; index as i;"></div>
    
    B. First -- gives true or false if it's the first element
        i. Ex:
            <div *ngFor="let el of elements; index as i; first as f;"></div>
    
    C. Last -- gives true or false if it's the last element
        i. Ex:
            <div *ngFor="let el of elements; index as i; first as f; last as l;"></div>

    D. Even -- gives true or false if it's an even element
        i. Ex:
            <div *ngFor="let el of elements; index as i; first as f; last as l; even as e;"></div>

    E. Odd -- gives true or false if it's an odd element
        i. Ex:
            <div *ngFor="let el of elements; index as i; first as f; last as l; odd as o;"></div>

-----------------------------------------------------------------------
Tutorial #9: ngStyle
---------------------------------------------
1. ATTRIBUTE directive that lets us set a given DOM element (such as a <div> or <li>)'s style properties

2. Can pass dynamic values via variables

3. Ex (NON DYNAMIC):
        <div [ngStyle]="{'color': 'red'}">Example</div>
        ^^passing the CSS property (ex: background-color, color), followed by the value
   
   Ex (DYNAMIC):
        <div [ngStyle]="{'color': colorValue}">Here is an example of ngStyle</div>
        (we set the colorValue value in the corresponding ts file)

4. We can set 1+ properties via ngStyle
    Ex: 
        <div [ngStyle]="{'color': colorValue, 'background-color': bgColorValue }"Example</div>
        (we set the colorValue and bgColorValue values in the corresponding ts file)

-----------------------------------------------------------------------
Tutorial #10: ngClass
---------------------------------------------

1. ATTRIBUTE directive that lets us set the class name for DOM elements. 
    [ngClass]="" <--example. When passing a string in, use '' within ""

2. Can pass dynamic values via variables    
    - strings, arrays, objects, component Method

3. Examples:
    <div [ngClass]="one">First example</div>
    <div [ngClass]=" { 'one': true, 'two': false } ">Multiple class name example</div>

5. Dynamic example: 
    <div [ngClass]="variableName">Dynamic</div>

    TO PASS MULTIPLE CLASSES, WE CAN USE AN ARRAY:

    <div [ngClass]="[clsName, clsName2]">Example</div>

6. We can use expressions to evaluate the classes. Example:

    <div [ngClass]=" { 'one': true, 'two': false } "></div>

    By doing the above, we apply the 'one' class if true, else (if it's false), apply the 'two' class.

-----------------------------------------------------------------------
Tutorial #11: Data Binding (ALL EXAMPLES WILL BE IN THE data-binding-tutorial-section COMPONENT)
---------------------------------------------

1. Data Binding allows us to BIND the data from the view (Template) to the Controller (Component class) and vice versa

2. Data Binding (interacting with data) defines HOW the data flows & gets updated, based on our business logic (which is returned in our Component class). 
    --Business Logic is referred to as the Component class (ex: app.component.ts).

3. Every component will have a template (view) & component, so we need data that flows both ways

4. 2 Types of Data Binding:

    A. One-Way Data Binding (one at a time)
        i. This is Component-to-View
            -We can accomplish this via:
                -Interpolation {{ example here }}
                    -Displays the data from Component to View (HTML file)
                -Property Binding
                -Style Binding
                -Attribute Binding
        
        ii. This can also be View-to-Component (from Template/HTML to Component)
            -We can accomplish this via EVENT Binding (EX: onKeyUp, onKeyDown).

    B. Two-Way Data Binding 
        i. Data flows from View-to-Component AND from Component-to-View all at once
            -Use ngModel for this


-----------------------------------------------------------------------
Tutorial #12: One-Way Data Binding (INTERPOLATION ONLY)
---------------------------------------------

1. Interpolation allows the user to bind data from COMPONENT TO VIEW/TEMPLATE/HTML

2. The data flow here is ONE-WAY ONLY (from Component to View)

3. This can be used for number/integers, strings, objects, arrays, and more.

4. Syntax is {{ variableName }}

5. ALL EXAMPLES WILL BE IN THE data-binding-tutorial-section COMPONENT

-----------------------------------------------------------------------
Tutorial #13: One-Way Data Binding (PROPERTY BINDING ONLY)
---------------------------------------------

1. Property Binding allows the user to bind properties of elements from COMPONENT TO VIEW(TEMPLATE/HTML)

2. The data flow here is ONE-WAY ONLY (from Component to View)

3. This can be used for all properties, such as innerHTML, src, etc.

4. Syntax is [propertyName]="'expressionHere'"

5. ALL EXAMPLES WILL BE IN THE data-binding-tutorial-section COMPONENT

-----------------------------------------------------------------------
Tutorial #14: One-Way Data Binding (ATTRIBUTE BINDING ONLY)
---------------------------------------------

1. Attribute Binding allows the user to bind ATTRIBUTES of elements from COMPONENT TO VIEW(TEMPLATE/HTML)

2. The data flow here is ONE-WAY ONLY (from Component to View)

3. This can be used for ANY EXISTING PROPERTIES OR CUSTOM ATTRIBUTES

4. Syntax for defining Attribute Binding: 
    [attr.attributeName]="'expressionHere'"

5. ALL EXAMPLES WILL BE IN THE data-binding-tutorial-section COMPONENT

-----------------------------------------------------------------------
Tutorial #15: One-Way Data Binding (EVENT BINDING ONLY)
---------------------------------------------

1. Event Binding allows the user to bind EVENTS of elements from COMPONENT TO VIEW(TEMPLATE/HTML)

2. The data flow here is ONE-WAY ONLY (from Component to View)

3. This can be used for ALL AVAILABLE EVENTS

4. Syntax for defining Event Binding: 
    <button (eventName)="function()"></button>
  
5. Some events include: onKeyUp, onHover, onKeyDown, etc
    
6. ALL EXAMPLES WILL BE IN THE data-binding-tutorial-section COMPONENT


-----------------------------------------------------------------------
Tutorial #16: Two-Way Data Binding (EXAMPLE IN two-way-data-binding component)
---------------------------------------------

1. Allows the user to bind EVENTS of elements from COMPONENT TO VIEW(TEMPLATE/HTML)

2. The data flow here is BOTH WAYS (from View to Component & from Component to View)

3. Two-Way Data Binding is a COMBINATION of Property Binding & Event Binding

4. In this type of data binding, we use ngModel  
    -MUST IMPORT { FormsModule } INTO YOUR app.module.ts IN ORDER TO USE ngModel

5. Syntax:
    <input [(ngModel)]='data'/>
      
6. ALL EXAMPLES WILL BE IN THE two-way-data-binding COMPONENT